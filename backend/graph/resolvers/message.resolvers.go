package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.56

import (
	"context"
	"fmt"
	"musicboxd/graph"
	"musicboxd/graph/model"
	"time"

	"github.com/99designs/gqlgen/graphql/handler/transport"
)

func (r *subscriptionResolver) Msg(ctx context.Context) (<-chan *model.Message, error) {
	connParams := transport.GetInitPayload(ctx)
	jwt := connParams["Authorization"].(string)

	_, err := ValidateJWTString(jwt)
	if err != nil {
		return nil, err
	}

	ch := make(chan *model.Message)

	go func() {
		defer close(ch)

		for {
			time.Sleep(1 * time.Second)
			fmt.Println("Tick")

			t := &model.Message{
				TimeStamp: time.Now(),
			}

			select {
			case <-ctx.Done():
				// Subscription closes
				fmt.Println("Subscription Closed")
				return

			case ch <- t:
				// Message sent
				fmt.Println("Message sent")
			}
		}
	}()

	return ch, nil
}

func (r *Resolver) Subscription() graph.SubscriptionResolver { return &subscriptionResolver{r} }

type subscriptionResolver struct{ *Resolver }
