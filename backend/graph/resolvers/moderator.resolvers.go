package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.56

import (
	"context"
	"fmt"
	"musicboxd/database"
	"musicboxd/graph"
	"musicboxd/graph/model"
	"time"

	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
)

func (r *mutationResolver) ReportComment(ctx context.Context, id string) (string, error) {
	cc, err := ValidateJWT(ctx)
	if err != nil {
		return "", err
	}

	commentID, err := primitive.ObjectIDFromHex(id)
	if err != nil {
		return "", fmt.Errorf("invalid comment ID")
	}

	coll := database.GetDB().GetCollection("comments")
	report, err := coll.InsertOne(
		ctx,
		bson.M{
			"commentId":  commentID,
			"reportedBy": cc.UserID,
			"createdAt":  primitive.NewDateTimeFromTime(time.Now()),
			"status":     "reported",
		},
	)

	if err != nil {
		return "", err
	}

	reportID, ok := report.InsertedID.(primitive.ObjectID)
	if !ok {
		return "", fmt.Errorf("failed to convert inserted ID to ObjectID")
	}

	return reportID.Hex(), nil
}

func (r *queryResolver) ReportedComments(ctx context.Context) ([]*model.ReportedComment, error) {
	panic(fmt.Errorf("not implemented: ReportedComments - reportedComments"))
}

func (r *queryResolver) ReportedComment(ctx context.Context, id string) (*model.ReportedComment, error) {
	panic(fmt.Errorf("not implemented: ReportedComment - reportedComment"))
}

func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
