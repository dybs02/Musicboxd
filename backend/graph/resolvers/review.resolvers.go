package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.56

import (
	"context"
	"errors"
	"math"
	"musicboxd/database"
	"musicboxd/graph/model"
	"musicboxd/hlp"
	"time"

	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo/options"
)

func (r *mutationResolver) CreateOrUpdateReview(ctx context.Context, itemID string, itemType string, title *string, description *string, value *int) (*model.Review, error) {
	cc, err := ValidateJWT(ctx)
	if err != nil {
		return nil, err
	}

	accessToken, err := GetUserAccessToken(ctx)
	if err != nil {
		return nil, err
	}

	var album *model.Album

	if itemType == "track" {
		track, err := hlp.SpotifyGetTrack(itemID, accessToken)
		if err != nil {
			return nil, err
		}
		album = track.Album
	} else if itemType == "album" {
		album, err = hlp.SpotifyGetAlbum(itemID, accessToken)
		if err != nil {
			return nil, err
		}
	} else {
		return nil, errors.New("invalid item type")
	}

	dbAlbum := map[string]interface{}{
		"albumId": album.ID,
		"name":    album.Name,
		"images":  album.Images,
		"artists": album.Artists,
	}

	coll := database.GetDB().GetCollection("reviews")
	review := coll.FindOneAndUpdate(
		ctx,
		bson.M{"itemId": itemID, "userId": cc.UserID, "itemType": itemType},
		bson.M{
			"$setOnInsert": bson.M{
				"comments": []interface{}{},
			},
			"$set": bson.M{
				"title":       title,
				"description": description,
				"value":       value,
				"album":       dbAlbum,
			}},
		options.FindOneAndUpdate().SetUpsert(true).SetReturnDocument(options.After),
	)
	if review.Err() != nil {
		return nil, review.Err()
	}

	res := model.Review{}
	err = review.Decode(&res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

func (r *mutationResolver) AddComment(ctx context.Context, itemID string, reviewID string, text string) ([]*model.Comment, error) {
	cc, err := ValidateJWT(ctx)
	if err != nil {
		return nil, err
	}

	convertedReviewID, err := primitive.ObjectIDFromHex(reviewID)
	if err != nil {
		return nil, err
	}

	coll := database.GetDB().GetCollection("reviews")
	comment := coll.FindOneAndUpdate(
		ctx,
		bson.M{"itemId": itemID, "userId": convertedReviewID},
		bson.M{
			"$push": bson.M{
				"comments": bson.M{
					"_id":       primitive.NewObjectID(),
					"reviewId":  reviewID, // why would i need it here?
					"userId":    cc.UserID,
					"text":      text,
					"createdAt": time.Now(), // TODO check if timezone independent - utc+0?
					"updatedAt": time.Now(),
				},
			},
		},
		options.FindOneAndUpdate().SetReturnDocument(options.After),
	)

	if comment.Err() != nil {
		return nil, comment.Err()
	}

	res := model.Review{}
	err = comment.Decode(&res)
	if err != nil {
		return nil, err
	}

	if isFieldRequested(ctx, "user") {
		for _, comment := range res.Comments {
			coll := database.GetDB().GetCollection("users")

			convertedID, err := primitive.ObjectIDFromHex(*comment.UserID)
			if err != nil {
				return nil, err
			}

			user := coll.FindOne(ctx, bson.M{"_id": convertedID})
			if user.Err() != nil {
				return nil, user.Err()
			}

			u := model.UserResponse{}
			err = user.Decode(&u)
			if err != nil {
				return nil, err
			}

			comment.User = &u
		}
	}

	// TODO return only the added comment?
	return res.Comments, nil
}

func (r *queryResolver) Review(ctx context.Context, itemID string, userID string) (*model.Review, error) {
	_, err := ValidateJWT(ctx)
	if err != nil {
		return nil, err
	}

	convertedID, err := primitive.ObjectIDFromHex(userID)
	if err != nil {
		return nil, err
	}

	coll := database.GetDB().GetCollection("reviews")
	review := coll.FindOne(ctx, bson.M{"itemId": itemID, "userId": convertedID})
	if review.Err() != nil {
		return nil, review.Err()
	}

	res := model.Review{}
	err = review.Decode(&res)
	if err != nil {
		return nil, err
	}

	if isFieldRequested(ctx, "user") {
		convertedID, err := primitive.ObjectIDFromHex(res.UserID)
		if err != nil {
			return nil, err
		}

		coll := database.GetDB().GetCollection("users")
		user := coll.FindOne(ctx, bson.M{"_id": convertedID})
		if user.Err() != nil {
			return nil, user.Err()
		}

		u := model.UserResponse{}
		err = user.Decode(&u)
		if err != nil {
			return nil, err
		}

		res.User = &u
	}

	if isFieldRequested(ctx, "comments.user") {
		for _, comment := range res.Comments {
			coll := database.GetDB().GetCollection("users")

			convertedID, err := primitive.ObjectIDFromHex(*comment.UserID)
			if err != nil {
				return nil, err
			}

			user := coll.FindOne(ctx, bson.M{"_id": convertedID})
			if user.Err() != nil {
				return nil, user.Err()
			}

			u := model.UserResponse{}
			err = user.Decode(&u)
			if err != nil {
				return nil, err
			}

			comment.User = &u
		}
	}

	return &res, nil
}

func (r *queryResolver) RecentReviews(ctx context.Context, number *int, itemType string) ([]*model.Review, error) {
	coll := database.GetDB().GetCollection("reviews")
	cursor, err := coll.Find(
		ctx,
		bson.M{"itemType": itemType},
		options.Find().SetSort(bson.M{"createdAt": -1}).SetLimit(int64(min(*number, 20))),
	)
	if err != nil {
		return nil, err
	}

	res := []*model.Review{}
	for cursor.Next(ctx) {
		r := model.Review{}
		err = cursor.Decode(&r)
		if err != nil {
			return nil, err
		}

		if isFieldRequested(ctx, "user") {
			convertedID, err := primitive.ObjectIDFromHex(r.UserID)
			if err != nil {
				return nil, err
			}

			coll := database.GetDB().GetCollection("users")
			user := coll.FindOne(ctx, bson.M{"_id": convertedID}) // TODO maybe there is a way to get all users at once?
			if user.Err() != nil {
				return nil, user.Err()
			}

			u := model.UserResponse{}
			err = user.Decode(&u)
			if err != nil {
				return nil, err
			}

			r.User = &u
		}

		// comments.user field is not added

		res = append(res, &r)
	}

	return res, nil
}

func (r *queryResolver) RecentUserReviews(ctx context.Context, pageSize *int, page int, itemType string, userID string) (*model.RecentUserReviews, error) {
	// Authenticate user or no ???

	filter := bson.M{}
	if itemType != "" {
		filter["itemType"] = itemType
	}
	if userID != "" {
		convertedID, err := primitive.ObjectIDFromHex(userID)
		if err != nil {
			return nil, err
		}
		filter["userId"] = convertedID
	}

	coll := database.GetDB().GetCollection("reviews")
	res := &model.RecentUserReviews{}

	currentPage := 1
	if page > 0 {
		currentPage = page
	}

	limit := 10
	if pageSize != nil && *pageSize > 0 {
		limit = min(*pageSize, 20)
	}

	skip := (currentPage - 1) * limit

	if isFieldRequested(ctx, "reviews") {
		cursor, err := coll.Find(
			ctx,
			filter,
			options.Find().
				SetSort(bson.M{"createdAt": -1}).
				SetSkip(int64(skip)).
				SetLimit(int64(limit)),
		)
		if err != nil {
			return nil, err
		}

		defer cursor.Close(ctx)
		var reviews []*model.Review
		if err = cursor.All(ctx, &reviews); err != nil {
			return nil, err
		}

		if isFieldRequested(ctx, "user") && len(reviews) > 0 {
			// Unique user IDs
			userIDMap := make(map[string]bool)
			for _, review := range reviews {
				if review.UserID != "" {
					userIDMap[review.UserID] = true
				}
			}

			userIDs := make([]primitive.ObjectID, 0, len(userIDMap))
			for id := range userIDMap {
				objID, err := primitive.ObjectIDFromHex(id)
				if err != nil {
					return nil, err
				}
				userIDs = append(userIDs, objID)
			}

			usersColl := database.GetDB().GetCollection("users")
			usersCursor, err := usersColl.Find(
				ctx,
				bson.M{"_id": bson.M{"$in": userIDs}},
			)
			if err != nil {
				return nil, err
			}
			defer usersCursor.Close(ctx)

			var users []*model.UserResponse
			if err = usersCursor.All(ctx, &users); err != nil {
				return nil, err
			}

			userMap := make(map[string]*model.UserResponse)
			for _, user := range users {
				userMap[user.ID] = user
			}

			for _, review := range reviews {
				if user, ok := userMap[review.UserID]; ok {
					review.User = user
				}
			}
		}

		res.Reviews = reviews

	}

	total, err := coll.CountDocuments(ctx, filter)
	if err != nil {
		return nil, err
	}

	res.TotalReviews = int(total)
	res.TotalPages = int(math.Ceil(float64(total) / float64(limit)))
	res.HasNextPage = currentPage < res.TotalPages
	res.HasPreviousPage = currentPage > 1

	return res, nil
}
