package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.56

import (
	"context"
	"musicboxd/database"
	"musicboxd/graph"
	"musicboxd/graph/model"

	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/mongo/options"
)

func (r *mutationResolver) CreateOrUpdateReview(ctx context.Context, itemID string, title *string, description *string, value *int) (*model.Review, error) {
	cc, err := ValidateJWT(ctx)
	if err != nil {
		return nil, err
	}

	coll := database.GetDB().GetCollection("reviews")
	review := coll.FindOneAndUpdate(
		ctx,
		bson.M{"itemId": itemID, "userId": cc.UserID},
		bson.M{"$set": bson.M{"title": title, "description": description, "value": value}},
		options.FindOneAndUpdate().SetUpsert(true).SetReturnDocument(options.After),
	)
	if review.Err() != nil {
		return nil, review.Err()
	}

	res := model.Review{}
	err = review.Decode(&res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

func (r *queryResolver) Review(ctx context.Context, itemID string, userID string) (*model.Review, error) {
	_, err := ValidateJWT(ctx)
	if err != nil {
		return nil, err
	}

	coll := database.GetDB().GetCollection("reviews")
	review := coll.FindOne(ctx, bson.M{"itemId": itemID, "userId": userID})
	if review.Err() != nil {
		return nil, review.Err()
	}

	res := model.Review{}
	err = review.Decode(&res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

func (r *Resolver) Mutation() graph.MutationResolver { return &mutationResolver{r} }

func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
