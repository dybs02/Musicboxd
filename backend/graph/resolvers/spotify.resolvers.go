package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.56

import (
	"context"
	"musicboxd/graph"
	"musicboxd/graph/model"
	"musicboxd/hlp"
)

func (r *queryResolver) Search(ctx context.Context, typeArg *string, query string) (*model.SearchResponse, error) {
	// TODO check type, if empty set to "track,album,artist" ???
	// TODO eg. type="users" -> search user database instead of spotify

	// TODO implement client_credentials flow & use that token - allows not logged users to search
	accessToken, err := GetUserAccessToken(ctx)
	if err != nil {
		return nil, err
	}

	res, err := hlp.SpotifySearch(query, *typeArg, accessToken)
	if err != nil {
		return nil, err
	}
	return res, nil
}

func (r *queryResolver) Track(ctx context.Context, id string) (*model.Track, error) {
	accessToken, err := GetUserAccessToken(ctx)
	if err != nil {
		return nil, err
	}

	res, err := hlp.SpotifyGetTrack(id, accessToken)
	if err != nil {
		return nil, err
	}
	return res, nil
}

func (r *queryResolver) Album(ctx context.Context, id string) (*model.Album, error) {
	accessToken, err := GetUserAccessToken(ctx)
	if err != nil {
		return nil, err
	}

	res, err := hlp.SpotifyGetAlbum(id, accessToken)
	if err != nil {
		return nil, err
	}
	return res, nil
}

func (r *Resolver) Query() graph.QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
