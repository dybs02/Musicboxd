package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.56

import (
	"context"
	"musicboxd/database"
	"musicboxd/graph/model"

	"go.mongodb.org/mongo-driver/bson"
)

func (r *mutationResolver) UpdateCurrentUser(ctx context.Context, displayName *string) (*model.UserResponse, error) {
	cc, err := ValidateJWT(ctx)
	if err != nil {
		return nil, err
	}

	coll := database.GetDB().GetCollection("users")
	_, err = coll.UpdateOne(ctx, bson.M{"_id": cc.UserID}, bson.M{"$set": bson.M{"displayName": displayName}})
	if err != nil {
		return nil, err
	}

	user := coll.FindOne(ctx, bson.M{"_id": cc.UserID})
	if user.Err() != nil {
		return nil, user.Err()
	}

	res := model.UserResponse{}
	err = user.Decode(&res)
	if err != nil {
		return nil, err
	}

	return &res, nil
}

func (r *queryResolver) UserByDisplayName(ctx context.Context, displayName string) (*model.UserResponse, error) {
	coll := database.GetDB().GetCollection("users")
	user := coll.FindOne(ctx, bson.M{"displayName": displayName})
	if user.Err() != nil {
		return nil, user.Err()
	}

	res := model.UserResponse{}
	err := user.Decode(&res)
	if err != nil {
		return nil, err
	}
	return &res, nil
}
