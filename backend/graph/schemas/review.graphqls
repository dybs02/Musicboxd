scalar Time

type Review {
  _id: ID
  value: Int!
  itemId: String!
  itemType: String!
  title: String!
  description: String!
  userId: ID!
  user: UserResponse
  createdAt: Time!
  updatedAt: Time
  comments: [Comment!]
  album: ReviewAlbum
  likes: [ID]
  likesCount: Int!
  dislikes: [ID]
  dislikesCount: Int!
  userReaction: String
}

type ReviewAlbum {
  albumId: String!
  name: String!
  images: [Image!]!
  artists: [SimplifiedArtist!]!
}

type Comment {
  _id: ID
  itemId: String!
  reviewId: ID
  userId: String
  user: UserResponse
  text: String
  createdAt: Time
  updatedAt: Time
  likes: [ID]
  likesCount: Int!
  dislikes: [ID]
  dislikesCount: Int!
  userReaction: String
}

type RecentUserReviews {
  totalReviews: Int!
  totalPages: Int!
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  reviews: [Review!]!
}

extend type Query {
  review(itemId: String!, userId: String!): Review!
  recentReviews(number: Int, itemType: String!): [Review!]!
  recentUserReviews(pageSize: Int, page: Int!, itemType: String!, userId: String!): RecentUserReviews!
}

extend type Mutation {
  createOrUpdateReview(itemId: String!, itemType: String!, title: String, description: String, value: Int): Review!
  addComment(itemId: String!, reviewId: String!, text: String!): Comment!
  addLikeDislike(itemId: String!, action: String!): Review!
}