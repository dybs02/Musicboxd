type Tracks {
  href: String
  limit: Int
  next: String
  offset: Int!
  previous: String!
  total: Int!
  items: [Track!]!
}

type Track {
  album: Album!
  artists: [SimplifiedArtist!]!
  available_markets: [String!]!
  disc_number: Int!
  duration_ms: Int!
  explicit: Boolean!
  # external_ids: ExternalIds!
  external_urls: ExternalUrls!
  href: String!
  id: String!
  is_playable: Boolean!
  # linked_from: LinkedFrom
  # restrictions: Restrictions
  name: String!
  popularity: Int!
  preview_url: String # deprecated ?
  track_number: Int!
  type: String!
  uri: String!
  is_local: Boolean!
}

type Albums {
  href: String!
  limit: Int!
  next: String!
  offset: Int!
  previous: String!
  total: Int!
  items: [Album!]!
}

type Album {
  album_type: String!
  total_tracks: Int!
  available_markets: [String!]!
  external_urls: ExternalUrls!
  href: String!
  id: String!
  images: [Image!]!
  name: String!
  release_date: String!
  release_date_precision: String!
  type: String!
  uri: String!
  artists: [SimplifiedArtist!]!
  tracks: Tracks!
}

type SimplifiedArtist {
  external_urls: ExternalUrls!
  href: String!
  id: String!
  name: String!
  type: String!
  uri: String!
}

type SearchResponse {
  tracks: Tracks
  albums: Albums
}

extend type Query {
  search(type: String, query: String!): SearchResponse!
  track(id: String!): Track!
  album(id: String!): Album!
  albumsByIds(ids: [String!]!): [Album!]!
}